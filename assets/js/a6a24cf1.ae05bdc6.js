"use strict";(self.webpackChunkavail_docs_wiki=self.webpackChunkavail_docs_wiki||[]).push([[65],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294),r=n(6010);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(7462),r=n(7294),o=n(6010),l=n(2466),i=n(6550),s=n(1980),u=n(7392),c=n(12);function d(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function v(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=p(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[s,u]=h({queryString:n,groupId:a}),[d,v]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),f=(()=>{const e=s??d;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),v(e)}),[u,v,o]),tabValues:o}}var f=n(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),p=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==i&&(d(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:p},l,{className:(0,o.Z)("tabs__item",g.tabItem,l?.className,{"tabs__item--active":i===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:a}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function k(e){const t=v(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",g.tabList)},r.createElement(b,(0,a.Z)({},e,t)),r.createElement(y,(0,a.Z)({},e,t)))}function w(e){const t=(0,f.Z)();return r.createElement(k,(0,a.Z)({key:String(t)},e))}},1047:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));n(4866),n(5162),n(4996);const o={id:"avail-node-management",title:"Run an Avail Node",sidebar_label:"Run an Avail node",description:"Learn about running an Avail node.",keywords:["docs","avail","node"],image:"https://availproject.github.io/img/avail/AvailDocs.png",slug:"avail-node-management"},l=void 0,i={unversionedId:"Running Avail/avail-node-management",id:"Running Avail/avail-node-management",title:"Run an Avail Node",description:"Learn about running an Avail node.",source:"@site/docs/Running Avail/avail-node-management.md",sourceDirName:"Running Avail",slug:"/Running Avail/avail-node-management",permalink:"/Running Avail/avail-node-management",draft:!1,tags:[],version:"current",frontMatter:{id:"avail-node-management",title:"Run an Avail Node",sidebar_label:"Run an Avail node",description:"Learn about running an Avail node.",keywords:["docs","avail","node"],image:"https://availproject.github.io/img/avail/AvailDocs.png",slug:"avail-node-management"},sidebar:"defaultSidebar",previous:{title:"Run a Light Client",permalink:"/Running Avail/avail-light-client-da"},next:{title:"Run a Validator",permalink:"/Running Avail/avail-validator"}},s={},u=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Node prerequisites: Install Rust &amp; dependencies",id:"node-prerequisites-install-rust--dependencies",level:3},{value:"Run Avail Locally",id:"run-avail-locally",level:2},{value:"Running Avail full node",id:"running-avail-full-node",level:2}],c={toc:u},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"Common practice",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Users often run nodes on a cloud server. You may consider using a VPS provider to run your node.")),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"The following list of standard hardware is a recommendation of hardware specs that your environment should\nhave."),(0,r.kt)("p",null,"The hardware specs should at least have:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"4GB RAM"),(0,r.kt)("li",{parentName:"ul"},"2 core CPU"),(0,r.kt)("li",{parentName:"ul"},"20-40 GB SSD")),(0,r.kt)("admonition",{title:"If you plan on running a validator",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The hardware recommendations for running a validator on a Substrate-based chain:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"CPU - Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz"),(0,r.kt)("li",{parentName:"ul"},"Storage - A NVMe solid state drive with about 256GB. Should be reasonably sized to deal with\nblockchain growth."),(0,r.kt)("li",{parentName:"ul"},"Memory - 64GB ECC"))),(0,r.kt)("h3",{id:"node-prerequisites-install-rust--dependencies"},"Node prerequisites: Install Rust & dependencies"),(0,r.kt)("admonition",{title:"Installation steps by Substrate",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Avail is a Substrate-based chain and requires the same configuration to run a Substrate chain."),(0,r.kt)("p",{parentName:"admonition"},"Additional installation documentation is available in the Substrate\n",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://docs.substrate.io/v3/getting-started/installation/"},"getting started documentation")),".")),(0,r.kt)("p",null,"Once you choose an environment to run your node, ensure Rust is installed.\nIf you already have Rust installed, run the following command to make sure you are using the latest version."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"rustup update\n")),(0,r.kt)("p",null,"If not, start by running the following command to fetch the latest version of Rust:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"curl https://sh.rustup.rs -sSf | sh -s -- -y\n\nsource $HOME/.cargo/env\n\nrustup update nightly\n\nrustup target add wasm32-unknown-unknown --toolchain nightly\n\nrustc --version\n")),(0,r.kt)("p",null,"\ud83d\udca1If you encounter any issues during the installation process, please contact our team for assistance."),(0,r.kt)("p",null,"If you are looking for installing the required tools on different operating systems to work with our project visit the official Rust website: ",(0,r.kt)("a",{parentName:"p",href:"https://www.rust-lang.org/tools/install"},"https://www.rust-lang.org/tools/install"),".\nClick on the appropriate link for your operating system to download the Rust installation package."),(0,r.kt)("p",null,"If you are facing any issues during the Node installation process, please refer to the official Substrate installation guide: ",(0,r.kt)("a",{parentName:"p",href:"https://docs.substrate.io/install/"},"https://docs.substrate.io/install/"),". The guide provides detailed instructions for different operating systems."),(0,r.kt)("h2",{id:"run-avail-locally"},"Run Avail Locally"),(0,r.kt)("p",null,"Clone the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/availproject/avail.git"},"Avail source code"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"git clone https://github.com/availproject/avail.git\n")),(0,r.kt)("p",null,"Now go to ",(0,r.kt)("inlineCode",{parentName:"p"},"avail")," directory and compile the source code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cargo build --release -p data-avail\n")),(0,r.kt)("admonition",{title:"This process usually takes time",type:"caution"}),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"If the avail-node build is failing please install ",(0,r.kt)("a",{parentName:"mdxAdmonitionTitle",href:"https://grpc.io/docs/protoc-installation/"},"protoc")," also")),(0,r.kt)("p",null,"Run a local dev node with temporary datastore:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"./target/release/data-avail --dev --tmp\n")),(0,r.kt)("h2",{id:"running-avail-full-node"},"Running Avail full node"),(0,r.kt)("p",null,"If you intend to run a full node instead of a validator node, then you must have following two things ready with you -"),(0,r.kt)("p",null,"1) Raw chain spec to connect to the Avail testnet available ",(0,r.kt)("a",{parentName:"p",href:"http://testnet.avail.tools/chainspec.raw.json"},"here")," "),(0,r.kt)("p",null,"2) The p2p address of the boot node to connect to.  "),(0,r.kt)("p",null,"When you have both of them, then from your ",(0,r.kt)("inlineCode",{parentName:"p"},"avail")," directory execute the command -"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./target/release/data-avail --base-path /tmp/Testnet --chain misc/genesis/avail-testnet-raw-chain-spec.json --port 30333 --bootnodes /ip4/32.xxx.yyy.21/tcp/30333/p2p/12D3KoxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxYwLNRAnW*\n")),(0,r.kt)("p",null,"Of course, you can specify some other flags as per your needs too. Please refer to ",(0,r.kt)("inlineCode",{parentName:"p"},"data-avail")," ",(0,r.kt)("inlineCode",{parentName:"p"},"--help")," documentation if you need to know more about those options and flags."),(0,r.kt)("p",null,"\ud83d\udca1  ",(0,r.kt)("strong",{parentName:"p"},"Running data-avail binary as service:")," The command line execution shown above is not the best way to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"data-avail")," binary in production. We recommend that you build a service around ",(0,r.kt)("inlineCode",{parentName:"p"},"data-avail")," binary to use in your production environments. "),(0,r.kt)("p",null,"\u26a0\ufe0f The output must show at least one peer, otherwise there is something wrong in the command execution, such as a typo, an incorrect parameter, etc. "),(0,r.kt)("p",null,"Successfully connecting to one or more peers indicates that your new full node is now successfully connected to the Avail testnet. Congratulations!"))}p.isMDXComponent=!0}}]);