"use strict";(self.webpackChunkavail_docs_wiki=self.webpackChunkavail_docs_wiki||[]).push([[8259],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>k});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(a),u=o,k=c["".concat(p,".").concat(u)]||c[u]||m[u]||r;return a?n.createElement(k,i(i({ref:t},d),{},{components:a})):n.createElement(k,i({ref:t},d))}));function k(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},7581:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var n=a(7462),o=(a(7294),a(3905));const r={id:"op-stack",title:"How to Use the OP Stack with Avail",sidebar_label:"Use the OP Stack",description:"Discover how to utilize Avail as a data availability layer.",keywords:["documentation","avail","develop","build","data availability","da"],image:"https://docs.availproject.org/img/avail/AvailDocs.png"},i=void 0,l={unversionedId:"build/op-stack/op-stack",id:"build/op-stack/op-stack",title:"How to Use the OP Stack with Avail",description:"Discover how to utilize Avail as a data availability layer.",source:"@site/docs/build/op-stack/op-stack.md",sourceDirName:"build/op-stack",slug:"/build/op-stack/",permalink:"/build/op-stack/",draft:!1,editUrl:"https://github.com/availproject/availproject.github.io/tree/main/docs/build/op-stack/op-stack.md",tags:[],version:"current",lastUpdatedBy:"Danny Salman",lastUpdatedAt:1700597981,formattedLastUpdatedAt:"Nov 21, 2023",frontMatter:{id:"op-stack",title:"How to Use the OP Stack with Avail",sidebar_label:"Use the OP Stack",description:"Discover how to utilize Avail as a data availability layer.",keywords:["documentation","avail","develop","build","data availability","da"],image:"https://docs.availproject.org/img/avail/AvailDocs.png"},sidebar:"avail",previous:{title:"Overview",permalink:"/build/op-stack/overview"},next:{title:"Validium",permalink:"/category/validium"}},p={},s=[{value:"What You&#39;ll Do",id:"what-youll-do",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation Commands",id:"installation-commands",level:3},{value:"Build the Source Code",id:"build-the-source-code",level:2},{value:"Build the Optimism Monorepo",id:"build-the-optimism-monorepo",level:3},{value:"Build <code>op-geth</code>",id:"build-op-geth",level:3},{value:"Get Access to a Goerli Node",id:"get-access-to-a-goerli-node",level:3},{value:"Generate Keys",id:"generate-keys",level:3},{value:"Configure Your Network",id:"configure-your-network",level:3},{value:"Deploy the L1 Contracts",id:"deploy-the-l1-contracts",level:3},{value:"Generate the L2 Config Files",id:"generate-the-l2-config-files",level:3},{value:"Initialize <code>op-geth</code>",id:"initialize-op-geth",level:3},{value:"Run the Node Software",id:"run-the-node-software",level:2},{value:"Run <code>op-geth</code>",id:"run-op-geth",level:3},{value:"Reinitializing <code>op-geth</code>",id:"reinitializing-op-geth",level:3},{value:"Run <code>op-node</code>",id:"run-op-node",level:3},{value:"Run <code>op-batcher</code>",id:"run-op-batcher",level:3},{value:"Run <code>op-proposer</code>",id:"run-op-proposer",level:3},{value:"Get some ETH on your Rollup",id:"get-some-eth-on-your-rollup",level:3}],d={toc:s},c="wrapper";function m(e){let{components:t,...a}=e;return(0,o.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This guide will walk you through setting up your own avail-optimism chain on Ethereum's Goerli testnet and Avail Goldberg testnet. Set aside 1-2 hours for this process. Refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://stack.optimism.io/docs/build/getting-started/#know-before-you-go"},(0,o.kt)("ins",null,"Optimism Documentation"))," before getting started."),(0,o.kt)("h2",{id:"what-youll-do"},"What You'll Do"),(0,o.kt)("p",null,"Here\u2019s an itemized list of what we\u2019re about to do:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Install dependencies"),(0,o.kt)("li",{parentName:"ol"},"Build the source code"),(0,o.kt)("li",{parentName:"ol"},"Generate and fund accounts and private keys"),(0,o.kt)("li",{parentName:"ol"},"Configure your network"),(0,o.kt)("li",{parentName:"ol"},"Deploy the L1 contracts"),(0,o.kt)("li",{parentName:"ol"},"Initialize op-geth"),(0,o.kt)("li",{parentName:"ol"},"Run op-geth"),(0,o.kt)("li",{parentName:"ol"},"Run op-node"),(0,o.kt)("li",{parentName:"ol"},"Get some Goerli ETH on your L2"),(0,o.kt)("li",{parentName:"ol"},"Send some test transactions")),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"Ensure you have installed the following software:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://git-scm.com/"},"Git"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://go.dev/"},"Go"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://nodejs.org/en/"},"Node"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://classic.yarnpkg.com/lang/en/docs/install/"},"Pnpm"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/foundry-rs/foundry#installation"},"Foundry"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://linux.die.net/man/1/make"},"Make"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/jqlang/jq"},"jq"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("a",{parentName:"strong",href:"https://direnv.net/"},"direnv")))),(0,o.kt)("h3",{id:"installation-commands"},"Installation Commands"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This tutorial was ran on Ubuntu 20.04 LTS")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install -y git curl make jq\nwget https://go.dev/dl/go1.20.linux-amd64.tar.gz\ntar xvzf go1.20.linux-amd64.tar.gz\nsudo cp go/bin/go /usr/bin/go\nsudo mv go /usr/lib\necho export GOROOT=/usr/lib/go >> ~/.bashrc\ncurl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -\nsudo apt-get install -y nodejs npm\nsudo npm install -g pnpm\nyarn install:foundry\n")),(0,o.kt)("h2",{id:"build-the-source-code"},"Build the Source Code"),(0,o.kt)("p",null,"We\u2019re going to be spinning up an EVM Rollup from the Avail-OP Stack source code. The OP Stack source code is split between two repositories, the\xa0",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/availproject/avail-op-stack-adapter"},(0,o.kt)("ins",null,"Avail-OP-Stack Adapter"))," monorepo")," and the\xa0",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/ethereum-optimism/op-geth"},(0,o.kt)("ins",null,"op-geth"))),"\xa0repository."),(0,o.kt)("h3",{id:"build-the-optimism-monorepo"},"Build the Optimism Monorepo"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Clone the\xa0",(0,o.kt)("a",{parentName:"p",href:"https://github.com/availproject/avail-optimism"},(0,o.kt)("ins",null,"Avail-OP-Stack Adapter")),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~\ngit clone https://github.com/availproject/avail-op-stack-adapter.git\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Enter the Avail-OP-Stack Monorepo."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd avail-op-stack-adapter\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install required modules. This is a slow process, while it is running you can already start building\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-geth"),", as shown below."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pnpm install\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Build the various packages inside of the Optimism Monorepo."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"make op-node op-batcher op-proposer\npnpm build\n")))),(0,o.kt)("h3",{id:"build-op-geth"},"Build ",(0,o.kt)("inlineCode",{parentName:"h3"},"op-geth")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Clone\xa0",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/ethereum-optimism/op-geth"},(0,o.kt)("ins",null,"op-geth"))),"\xa0:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~\ngit clone https://github.com/ethereum-optimism/op-geth.git\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Enter\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-geth"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd op-geth\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Build\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-geth"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"make geth\n")))),(0,o.kt)("h3",{id:"get-access-to-a-goerli-node"},"Get Access to a Goerli Node"),(0,o.kt)("p",null,"Since we\u2019re deploying our OP Stack chain to Goerli, you\u2019ll need to have access to a Goerli L1 node. You can either use a node provider like\xa0",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://www.alchemy.com/"},"Alchemy"))," (easier) or\xa0",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://notes.ethereum.org/@launchpad/goerli"},"run your own Goerli node")),"\xa0(harder)."),(0,o.kt)("h3",{id:"generate-keys"},"Generate Keys"),(0,o.kt)("p",null,"You\u2019ll need four accounts and their private keys when setting up the chain:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"Admin"),"\xa0account which has the ability to upgrade contracts."),(0,o.kt)("li",{parentName:"ul"},"The\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"Batcher"),"\xa0account which publishes Sequencer transaction data to L1."),(0,o.kt)("li",{parentName:"ul"},"The\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"Proposer"),"\xa0account which publishes L2 transaction results to L1."),(0,o.kt)("li",{parentName:"ul"},"The\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"Sequencer"),"\xa0account which signs blocks on the p2p network.")),(0,o.kt)("p",null,"You can generate all of these keys with the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"rekey"),"\xa0tool in the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"contracts-bedrock"),"\xa0package."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Enter the Avail-Optimism Monorepo:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd avail-op-stack-adapter\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Move into the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"contracts-bedrock"),"\xa0package:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd packages/contracts-bedrock\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"cast wallet"),"\xa0to generate new accounts"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'echo "Admin:"\ncast wallet new\necho "Proposer:"\ncast wallet new\necho "Batcher:"\ncast wallet new\necho "Sequencer:"\ncast wallet new\n')))),(0,o.kt)("p",null,"You should get an output like the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"Admin:\nSuccessfully created new keypair.\nAddress:     0x9f92bdF0db69264462FC305913960Edfcc7a7c7F\nPrivate key: 0x30e66956e1a12b81f0f2cfb982286b2f566eb73649833831d9f80b12f8fa183c\nProposer:\nSuccessfully created new keypair.\nAddress:     0x31dE9B6473fc47af36ec23878bA34824B9F4AB30\nPrivate key: 0x8bd1c8dfffef880f8f9ab8162f97ccd119c1aac28fe00dacf919459f88e0f37d\nBatcher:\nSuccessfully created new keypair.\nAddress:     0x6A3DC843843139f17Fcf04C057bb536A421DC9c6\nPrivate key: 0x3ce44144b7fde797a28f4e47b210a4d42c3a3b642e538b54458cba2740db5ac2\nSequencer:\nSuccessfully created new keypair.\nAddress:     0x98C6cadB1fe77aBB7bD968fC3E9b206111e72848\nPrivate key: 0x3f4241229bb6f155140d98e0f5dd2aad7ae983f5af5d61555d05eb8e5d9514db\n")),(0,o.kt)("p",null,"Save these accounts and their respective private keys somewhere, you\u2019ll need them later. Fund the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"Admin"),"\xa0address with a small amount of Goerli ETH as we\u2019ll use that account to deploy our smart contracts. You\u2019ll also need to fund the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"Proposer"),"\xa0and\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"Batcher"),"\xa0address \u2014 note that the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"Batcher"),"\xa0burns through the most ETH because it publishes transaction data to L1."),(0,o.kt)("p",null,"Recommended funding amounts are as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Admin"),"\xa0\u2014 2 ETH"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Proposer"),"\xa0\u2014 5 ETH"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Batcher"),"\xa0\u2014 10 ETH")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Not for production deployments")),(0,o.kt)("p",null,"The\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"cast wallet new"),"\xa0tool is\xa0",(0,o.kt)("em",{parentName:"p"},"not"),"\xa0designed for production deployments. If you are deploying an Avail-Optimism Stack based chain into production, you should likely be using a combination of hardware security modules and hardware wallets."),(0,o.kt)("h3",{id:"configure-your-network"},"Configure Your Network"),(0,o.kt)("p",null,"Once you\u2019ve built both repositories, you\u2019ll need head back to the Optimism Monorepo to set up the configuration for your chain. Currently, chain configuration lives inside of the\xa0",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"[contracts-bedrock](https://github.com/availproject/avail-optimism/tree/129032f15b76b0d2a940443a39433de931a97a44/packages/contracts-bedrock)"),"\xa0",(0,o.kt)("a",{parentName:"strong",href:"https://github.com/ethereum-optimism/optimism/tree/129032f15b76b0d2a940443a39433de931a97a44/packages/contracts-bedrock"})),"package."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Enter the Avail-OP-Stack Monorepo:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/avail-op-stack-adapter\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Move into the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"contracts-bedrock"),"\xa0package:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd packages/contracts-bedrock\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Inside of\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"contracts-bedrock"),", copy the environment file"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cp .envrc.example .envrc\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Fill out the environment variables inside of that file:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ETH_RPC_URL"),"\xa0\u2014 URL for your L1 node."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"PRIVATE_KEY"),"\xa0\u2014 Private key of the\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"Admin"),"\xa0account."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"DEPLOYMENT_CONTEXT"),'\xa0- Name of the network, should be "avail-optimism"'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Pull the environment variables into context using\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"direnv")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"direnv allow .\n")),(0,o.kt)("p",{parentName:"li"},"If you need to install\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"direnv"),",\xa0",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://direnv.net/docs/hook.html"},"make sure you also modify the shell configuration")),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Before we can create our configuration file, we\u2019ll need to pick an L1 block to serve as the starting point for our Rollup. It\u2019s best to use a finalized L1 block as our starting block. You can use the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"cast"),"\xa0command provided by Foundry to grab all of the necessary information:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'cast block finalized --rpc-url $ETH_RPC_URL | grep -E "(timestamp|hash|number)"\n')),(0,o.kt)("p",{parentName:"li"},"You\u2019ll get back something that looks like the following:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"hash                 0x784d8e7f0e90969e375c7d12dac7a3df6879450d41b4cb04d4f8f209ff0c4cd9\nnumber               8482289\ntimestamp            1676253324\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a copy of file ",(0,o.kt)("inlineCode",{parentName:"p"},"deploy-config/getting-started.json")," at ",(0,o.kt)("inlineCode",{parentName:"p"},"deploy-config")," named ",(0,o.kt)("inlineCode",{parentName:"p"},"avail-optimism.json"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Fill out the remainder of the pre-populated config file\xa0",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"deploy-config/avail-optimism.json")),". Use the default values in the config file and make following modifications:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Replace\xa0",(0,o.kt)("inlineCode",{parentName:"li"},'"ADMIN"'),"\xa0with the address of the Admin account you generated earlier."),(0,o.kt)("li",{parentName:"ul"},"Replace\xa0",(0,o.kt)("inlineCode",{parentName:"li"},'"PROPOSER"'),"\xa0with the address of the Proposer account you generated earlier."),(0,o.kt)("li",{parentName:"ul"},"Replace\xa0",(0,o.kt)("inlineCode",{parentName:"li"},'"BATCHER"'),"\xa0with the address of the Batcher account you generated earlier."),(0,o.kt)("li",{parentName:"ul"},"Replace\xa0",(0,o.kt)("inlineCode",{parentName:"li"},'"SEQUENCER"'),"\xa0with the address of the Sequencer account you generated earlier."),(0,o.kt)("li",{parentName:"ul"},"Replace\xa0",(0,o.kt)("inlineCode",{parentName:"li"},'"BLOCKHASH"'),"\xa0with the blockhash you got from the\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"cast"),"\xa0command."),(0,o.kt)("li",{parentName:"ul"},"Replace\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"TIMESTAMP"),"\xa0with the timestamp you got from the\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"cast"),"\xa0command. Note that although all the other fields are strings, this field is a number! Don\u2019t include the quotation marks."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Check the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"enableDA")," config variable should be ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," to use Avail chain as DA or you can set it to ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," for using ethereum as DA")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Move into ",(0,o.kt)("inlineCode",{parentName:"p"},"op-avail")," module"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/avail-op-stack-adapter/op-avail\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add a ",(0,o.kt)("inlineCode",{parentName:"p"},"config.json")," file to this directory with these variables and change the ",(0,o.kt)("inlineCode",{parentName:"p"},"seed")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"app_id")," according to your avail account"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},'{\n  "seed": "test test test test test test test test test test test avail",\n  "api_url": "wss://goldberg.avail.tools:443/ws",\n  "app_id": 1\n}\n')))),(0,o.kt)("h3",{id:"deploy-the-l1-contracts"},"Deploy the L1 Contracts"),(0,o.kt)("p",null,"Once you\u2019ve configured your network, it\u2019s time to deploy the L1 smart contracts necessary for the functionality of the chain."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"avail-optimism"),"\xa0deployment directory."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir deployments/avail-optimism\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Once you\u2019re ready, deploy the L1 smart contracts."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"forge script scripts/Deploy.s.sol:Deploy --private-key $PRIVATE_KEY --broadcast --rpc-url $ETH_RPC_URL\nforge script scripts/Deploy.s.sol:Deploy --sig 'sync()' --private-key $PRIVATE_KEY --broadcast --rpc-url $ETH_RPC_URL\n")))),(0,o.kt)("p",null,"Contract deployment can take up to 15 minutes. Please wait for all smart contracts to be fully deployed before continuing to the next step."),(0,o.kt)("h3",{id:"generate-the-l2-config-files"},"Generate the L2 Config Files"),(0,o.kt)("p",null,"We\u2019ve set up the L1 side of things, but now we need to set up the L2 side of things. We do this by generating three important files, a\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"genesis.json"),"\xa0file, a\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"rollup.json"),"\xa0configuration file, and a\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"jwt.txt"),"\xa0",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://jwt.io/introduction"},"JSON Web Token"))," that allows the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-node"),"\xa0and\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-geth"),"\xa0to communicate securely."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Head over to the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-node"),"\xa0package."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/avail-op-stack-adapter/op-node\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Run the following command, and make sure to replace\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"<RPC>"),"\xa0with your L1 RPC URL:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"go run cmd/main.go genesis l2 \\\n    --deploy-config ../packages/contracts-bedrock/deploy-config/avail-optimism.json \\\n    --deployment-dir ../packages/contracts-bedrock/deployments/avail-optimism/ \\\n    --outfile.l2 genesis.json \\\n    --outfile.rollup rollup.json \\\n    --l1-rpc=$L1_RPC\n")),(0,o.kt)("p",{parentName:"li"},"You should then see the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"genesis.json"),"\xa0and\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"rollup.json"),"\xa0files inside the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-node"),"\xa0package.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Next, generate the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"jwt.txt"),"\xa0file with the following command:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"openssl rand -hex 32 > jwt.txt\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Finally, we\u2019ll need to copy the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"genesis.json"),"\xa0file and\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"jwt.txt"),"\xa0file into\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-geth"),"\xa0so we can use it to initialize and run\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-geth"),"\xa0in just a minute:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cp genesis.json ~/op-geth\ncp jwt.txt ~/op-geth\n")))),(0,o.kt)("h3",{id:"initialize-op-geth"},"Initialize ",(0,o.kt)("inlineCode",{parentName:"h3"},"op-geth")),(0,o.kt)("p",null,"We\u2019re almost ready to run our chain! Now we just need to run a few commands to initialize\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-geth"),". We\u2019re going to be running a Sequencer node, so we\u2019ll need to import the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"Sequencer"),"\xa0private key that we generated earlier. This private key is what our Sequencer will use to sign new blocks."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Head over to the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-geth"),"\xa0repository:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/op-geth\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a data directory folder:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir datadir\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Next we need to initialize\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-geth"),"\xa0with the genesis file we generated and copied earlier:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"build/bin/geth init --datadir=datadir genesis.json\n")))),(0,o.kt)("p",null,"Everything is now initialized and ready to go!"),(0,o.kt)("h2",{id:"run-the-node-software"},"Run the Node Software"),(0,o.kt)("p",null,"There are four components that need to run for a rollup. The first two,\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-geth"),"\xa0and\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-node"),", have to run on every node. The other two,\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-batcher"),"\xa0and\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-proposer"),", run only in one place, the sequencer that accepts transactions."),(0,o.kt)("p",null,"Set these environment variables for the configuration"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Variable"),(0,o.kt)("th",{parentName:"tr",align:null},"Value"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"SEQ_KEY"),(0,o.kt)("td",{parentName:"tr",align:null},"Private key of the\xa0Sequencer\xa0account")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"BATCHER_KEY"),(0,o.kt)("td",{parentName:"tr",align:null},"Private key of the\xa0Batcher\xa0accounts, which should have at least 1 ETH")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"PROPOSER_KEY"),(0,o.kt)("td",{parentName:"tr",align:null},"Private key of the\xa0Proposer\xa0account")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"L1_RPC"),(0,o.kt)("td",{parentName:"tr",align:null},"URL for the L1 (such as Goerli) you're using")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"RPC_KIND"),(0,o.kt)("td",{parentName:"tr",align:null},"The type of L1 server to which you connect, which can optimize requests. Available options are\xa0alchemy,\xa0quicknode,\xa0parity,\xa0nethermind,\xa0debug_geth,\xa0erigon,\xa0basic, and\xa0any")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"L2OO_ADDR"),(0,o.kt)("td",{parentName:"tr",align:null},"The address of the\xa0L2OutputOracleProxy, available at\xa0~/optimism/packages/contracts-bedrock/deployments/getting-started/L2OutputOracleProxy.json")))),(0,o.kt)("h3",{id:"run-op-geth"},"Run ",(0,o.kt)("inlineCode",{parentName:"h3"},"op-geth")),(0,o.kt)("p",null,"Run\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-geth"),"\xa0with the following commands."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'cd ~/op-geth\n\n./build/bin/geth \\\n        --datadir ./datadir \\\n        --http \\\n        --http.corsdomain="*" \\\n        --http.vhosts="*" \\\n        --http.addr=0.0.0.0 \\\n                --http.port=9545 \\\n        --http.api=web3,debug,eth,txpool,net,engine \\\n        --ws \\\n        --ws.addr=0.0.0.0 \\\n        --ws.port=9546 \\\n        --ws.origins="*" \\\n        --ws.api=debug,eth,txpool,net,engine \\\n        --syncmode=full \\\n        --gcmode=archive \\\n        --nodiscover \\\n        --maxpeers=0 \\\n        --networkid=42069 \\\n        --authrpc.vhosts="*" \\\n        --authrpc.addr=0.0.0.0 \\\n        --authrpc.port=9551 \\\n        --authrpc.jwtsecret=./jwt.txt \\\n        --rollup.disabletxpoolgossip=true\n')),(0,o.kt)("p",null,"And\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-geth"),"\xa0should be running! You should see some output, but you won\u2019t see any blocks being created yet because\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-geth"),"\xa0is driven by the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-node"),". We\u2019ll need to get that running next."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why archive mode?")),(0,o.kt)("p",null,"Archive mode takes more disk storage than full mode. However, using it is important for two reasons:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"op-proposer"),"\xa0requires access to the full state. If at some point\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"op-proposer"),"\xa0needs to look beyond 256 blocks in the past (8.5 minutes in the default configuration), for example because it was down for that long, we need archive mode."),(0,o.kt)("li",{parentName:"ul"},"The\xa0",(0,o.kt)("strong",{parentName:"li"},"explorer"),"\xa0requires archive mode.")),(0,o.kt)("h3",{id:"reinitializing-op-geth"},"Reinitializing ",(0,o.kt)("inlineCode",{parentName:"h3"},"op-geth")),(0,o.kt)("p",null,"There are several situations are indicate database corruption and require you to reset the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-geth"),"\xa0component:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"When\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"op-node"),"\xa0errors out when first started and exits."),(0,o.kt)("li",{parentName:"ul"},"When\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"op-node"),"\xa0emits this error:",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"stage 0 failed resetting: temp: failed to find the L2 Heads to start from: failed to fetch L2 block by hash 0x0000000000000000000000000000000000000000000000000000000000000000\n")))),(0,o.kt)("p",null,"This is the reinitialization procedure:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Stop the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-geth"),"\xa0process.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Delete the geth data."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/op-geth\nrm -rf datadir/geth\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Rerun init."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"build/bin/geth init --datadir=datadir genesis.json\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Start\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-geth"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Start\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-node")))),(0,o.kt)("h3",{id:"run-op-node"},"Run ",(0,o.kt)("inlineCode",{parentName:"h3"},"op-node")),(0,o.kt)("p",null,"Once we\u2019ve got\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-geth"),"\xa0running we\u2019ll need to run\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-node"),". Like Ethereum, the OP Stack has a consensus client (the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-node"),") and an execution client (",(0,o.kt)("inlineCode",{parentName:"p"},"op-geth"),"). The consensus client drives the execution client over the Engine API."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/optimism/op-node\n\n./bin/op-node \\\n    --l2=http://localhost:9551 \\\n    --l2.jwt-secret=./jwt.txt \\\n    --sequencer.enabled \\\n    --sequencer.l1-confs=3 \\\n    --verifier.l1-confs=3 \\\n    --rollup.config=./rollup.json \\\n    --rpc.addr=0.0.0.0 \\\n    --rpc.port=9547 \\\n    --p2p.disable \\\n    --rpc.enable-admin \\\n    --p2p.sequencer.key=$SEQ_KEY \\\n    --l1=$L1_RPC \\\n    --l1.rpckind=$RPC_KIND\n")),(0,o.kt)("p",null,"Once you run this command, you should start seeing the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-node"),"\xa0begin to process all of the L1 information after the starting block number that you picked earlier. Once the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-node"),"\xa0has enough information, it\u2019ll begin sending Engine API payloads to\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-geth"),". At that point, you\u2019ll start to see blocks being created inside of\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-geth"),". We\u2019re live!"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Peer to peer synchronization")),(0,o.kt)("p",null,"If you use a chain ID that is also used by others, for example the default (42069), your\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-node"),"\xa0will try to use peer to peer to speed up synchronization. These attempts will fail, because they will be signed with the wrong key, but they will waste time and network resources."),(0,o.kt)("p",null,"To avoid this , we start with peer to peer synchronization disabled (",(0,o.kt)("inlineCode",{parentName:"p"},"--p2p.disable"),"). Once you have multiple nodes, it makes sense to use these command line parameters to synchronize between them without getting confused by other blockchains."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"--p2p.static=<nodes> \\\n--p2p.listen.ip=0.0.0.0 \\\n--p2p.listen.tcp=9003 \\\n--p2p.listen.udp=9003 \\\n")),(0,o.kt)("h3",{id:"run-op-batcher"},"Run ",(0,o.kt)("inlineCode",{parentName:"h3"},"op-batcher")),(0,o.kt)("p",null,"The\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-batcher"),"\xa0takes transactions from the Sequencer and publishes those transactions to L1. Once transactions are on L1, they\u2019re officially part of the Rollup. Without the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-batcher"),", transactions sent to the Sequencer would never make it to L1 and wouldn\u2019t become part of the canonical chain. The\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-batcher"),"\xa0is critical!"),(0,o.kt)("p",null,"It is best to give the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"Batcher"),"\xa0at least 1 Goerli ETH to ensure that it can continue operating without running out of ETH for gas."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/optimism/op-batcher\n\n./bin/op-batcher \\\n    --l2-eth-rpc=http://localhost:9545 \\\n    --rollup-rpc=http://localhost:9547 \\\n    --poll-interval=10s \\\n    --sub-safety-margin=6 \\\n    --num-confirmations=1 \\\n    --safe-abort-nonce-too-low-count=3 \\\n    --resubmission-timeout=30s \\\n    --rpc.addr=0.0.0.0 \\\n    --rpc.port=9548 \\\n    --rpc.enable-admin \\\n    --max-channel-duration=1 \\\n    --l1-eth-rpc=$L1_RPC \\\n    --private-key=$BATCHER_KEY\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Controlling batcher costs")),(0,o.kt)("p",null,"The\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"--max-channel-duration=n"),"\xa0setting tells the batcher to write all the data to L1 every\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"n"),"\xa0L1 blocks. When it is low, transactions are written to L1 frequently, withdrawals are quick, and other nodes can synchronize from L1 fast. When it is high, transactions are written to L1 less frequently, and the batcher spends less ETH."),(0,o.kt)("h3",{id:"run-op-proposer"},"Run ",(0,o.kt)("inlineCode",{parentName:"h3"},"op-proposer")),(0,o.kt)("p",null,"Now start\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"op-proposer"),", which proposes new state roots."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/optimism/op-proposer\n\n./bin/op-proposer \\\n    --poll-interval=12s \\\n    --rpc.port=9560 \\\n    --rollup-rpc=http://localhost:9547 \\\n    --l2oo-address=$L2OO_ADDR \\\n    --private-key=$PROPOSER_KEY \\\n    --l1-eth-rpc=$L1_RPC\n")),(0,o.kt)("h3",{id:"get-some-eth-on-your-rollup"},"Get some ETH on your Rollup"),(0,o.kt)("p",null,"Once you\u2019ve connected your wallet, you\u2019ll probably notice that you don\u2019t have any ETH on your Rollup. You\u2019ll need some ETH to pay for gas on your Rollup. The easiest way to deposit Goerli ETH into your chain is to send funds directly to the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"L1StandardBridge"),"\xa0contract. You can find the address of the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"L1StandardBridge"),"\xa0contract for your chain by looking inside the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"deployments"),"\xa0folder in the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"contracts-bedrock"),"\xa0package."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"First, head over to the\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"contracts-bedrock"),"\xa0package:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/optimism/packages/contracts-bedrock\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Grab the address of the proxy to the L1 standard bridge contract:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cat deployments/avail-optimism/L1StandardBridgeProxy.json | jq -r .address\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Grab the L1 bridge proxy contract address and, using the wallet that you want to have ETH on your Rollup, send that address a small amount of ETH on Goerli (0.1 or less is fine). It may take up to 5 minutes for that ETH to appear in your wallet on L2."))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Congratulations, you made it! You now have a complete Avail-OP-Stack based EVM Rollup.")),(0,o.kt)("p",null,"You can use this rollup the same way you\u2019d use any other test blockchain."))}m.isMDXComponent=!0}}]);