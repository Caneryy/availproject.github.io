"use strict";(self.webpackChunkavail_docs_wiki=self.webpackChunkavail_docs_wiki||[]).push([[751],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>g});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var c=n.createContext({}),u=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},v=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(a),v=i,g=d["".concat(c,".").concat(v)]||d[v]||s[v]||l;return a?n.createElement(g,r(r({ref:t},p),{},{components:a})):n.createElement(g,r({ref:t},p))}));function g(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=v;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[d]="string"==typeof e?e:i,r[1]=o;for(var u=2;u<l;u++)r[u]=a[u];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}v.displayName="MDXCreateElement"},7533:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>s,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var n=a(7462),i=(a(7294),a(3905));a(4996);const l={id:"avail-light-client-da",title:"Build and Run a Light Client with Data Availability",sidebar_label:"Run a Light Client",description:"Learn about building and running a Light Client with Data Availability",keywords:["docs","avail","node","data availability","da"],image:"https://availproject.github.io/img/avail/AvailDocs.png",slug:"avail-light-client-da"},r=void 0,o={unversionedId:"Running Avail/avail-light-client-da",id:"Running Avail/avail-light-client-da",title:"Build and Run a Light Client with Data Availability",description:"Learn about building and running a Light Client with Data Availability",source:"@site/docs/Running Avail/avail-light-client-da.md",sourceDirName:"Running Avail",slug:"/Running Avail/avail-light-client-da",permalink:"/Running Avail/avail-light-client-da",draft:!1,tags:[],version:"current",frontMatter:{id:"avail-light-client-da",title:"Build and Run a Light Client with Data Availability",sidebar_label:"Run a Light Client",description:"Learn about building and running a Light Client with Data Availability",keywords:["docs","avail","node","data availability","da"],image:"https://availproject.github.io/img/avail/AvailDocs.png",slug:"avail-light-client-da"},sidebar:"defaultSidebar",previous:{title:"System Overview",permalink:"/Architecture/avail-system-overview"},next:{title:"Run an Avail node",permalink:"/Running Avail/avail-node-management"}},c={},u=[{value:"Build &amp; Run <code>avail-light</code> &amp; <code>data-avail</code>",id:"build--run-avail-light--data-avail",level:2}],p={toc:u},d="wrapper";function s(e){let{components:t,...a}=e;return(0,i.kt)(d,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"build--run-avail-light--data-avail"},"Build & Run ",(0,i.kt)("inlineCode",{parentName:"h2"},"avail-light")," & ",(0,i.kt)("inlineCode",{parentName:"h2"},"data-avail")),(0,i.kt)("p",null,"First clone the Light client repo "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"git clone https://github.com/availproject/avail-light.git\n")),(0,i.kt)("p",null,"then create a config file( if you don't create a file it will be automatically generated with default values)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'http_server_host = "127.0.0.1"\nhttp_server_port = "7000"\n\nlibp2p_seed = 1\nlibp2p_port = "37000"\nipfs_path = "avail_store"\n\n# Local node must be running otherwise connect to wss://testnet.avail.tools/ws\nfull_node_rpc = ["http://127.0.0.1:9933"]\nfull_node_ws = ["ws://127.0.0.1:9944"]\n# None in case of default Light Client Mode\napp_id = 0\n\nconfidence = 92.0\navail_path = "avail_path"\n\nbootstraps = []\n\n\n# See https://docs.rs/log/0.4.14/log/enum.LevelFilter.html for possible log level values\nlog_level = "INFO"\n')),(0,i.kt)("p",null,"You can also read the readme file for config values"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/availproject/avail-light#config-reference"},"https://github.com/availproject/avail-light#config-reference")),(0,i.kt)("p",null,"Run the Light client with following config"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cargo run -- -c config.yaml\n")),(0,i.kt)("p",null,"One thing to note is that you might be asked to connect a bootstrap client when you try to run it locally.\nPlease reach out to Avail team inorder to get the bootstrap address."))}s.isMDXComponent=!0}}]);