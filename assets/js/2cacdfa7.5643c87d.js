"use strict";(self.webpackChunkavail_docs_wiki=self.webpackChunkavail_docs_wiki||[]).push([[8281],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=c(n),m=a,f=s["".concat(p,".").concat(m)]||s[m]||u[m]||o;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[s]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8083:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));n(4996);const o={id:"rpc",title:"How to Run an RPC Node",sidebar_label:"RPC Node",description:"Learn how to run a rpc node",keywords:["docs","avail","node","data availability","da"],image:"https://docs.availproject.org/img/avail/AvailDocs.png"},i=void 0,l={unversionedId:"operate/node/rpc",id:"operate/node/rpc",title:"How to Run an RPC Node",description:"Learn how to run a rpc node",source:"@site/docs/operate/node/0040-rpc-node.md",sourceDirName:"operate/node",slug:"/operate/node/rpc",permalink:"/operate/node/rpc",draft:!1,editUrl:"https://github.com/availproject/availproject.github.io/tree/main/docs/operate/node/0040-rpc-node.md",tags:[],version:"current",lastUpdatedBy:"Marko Petrlic",lastUpdatedAt:1699375369,formattedLastUpdatedAt:"Nov 7, 2023",sidebarPosition:40,frontMatter:{id:"rpc",title:"How to Run an RPC Node",sidebar_label:"RPC Node",description:"Learn how to run a rpc node",keywords:["docs","avail","node","data availability","da"],image:"https://docs.availproject.org/img/avail/AvailDocs.png"},sidebar:"avail",previous:{title:"Using Docker",permalink:"/operate/node/docker"},next:{title:"Bootstrap Node",permalink:"/operate/node/bootstrap"}},p={},c=[{value:"Configuration Parameters",id:"configuration-parameters",level:2},{value:"Example Startup Command",id:"example-startup-command",level:2},{value:"Testing Your RPC Node",id:"testing-your-rpc-node",level:2}],d={toc:c},s="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(s,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This guide offers a walkthrough for configuring and running an RPC node, enabling seamless interaction with the Avail network via HTTP and WebSocket."),(0,a.kt)("admonition",{title:"Before you start",type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"Ensure that you meet the ",(0,a.kt)("a",{parentName:"strong",href:"/operate/system-requirements"},(0,a.kt)("ins",null,"system requirements")),".")),(0,a.kt)("p",{parentName:"admonition"},"Before setting up an RPC node, make sure to review the ",(0,a.kt)("a",{parentName:"p",href:"/operate/node/binaries#archive-mode"},"archive node setup process"),". The setup process for an RPC node is almost identical, with a few additional parameters to enable RPC functionality.")),(0,a.kt)("h2",{id:"configuration-parameters"},"Configuration Parameters"),(0,a.kt)("p",null,"To run an RPC node, append the following flags to your startup command:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--rpc-external")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--ws-external")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--rpc-port 9944")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--ws-port 9933")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--rpc-cors=all"))),(0,a.kt)("p",null,"These flags enable external RPC and WebSocket connections and set the default ports to 9933 for HTTP and 9944 for WebSocket (WS)."),(0,a.kt)("h2",{id:"example-startup-command"},"Example Startup Command"),(0,a.kt)("p",null,"Here's an example command to start your RPC node:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./data-avail -d ~/avail-node/data --chain goldberg --pruning archive \\\n             --rpc-external --ws-external --rpc-port 9933 --ws-port 9944 --rpc-cors=all \n")),(0,a.kt)("admonition",{title:"Firewall Configuration",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Make sure to add the RPC ports (9933 for HTTP and 9944 for WS) to your firewall's allowed list to ensure smooth communication.")),(0,a.kt)("h2",{id:"testing-your-rpc-node"},"Testing Your RPC Node"),(0,a.kt)("p",null,"You can verify that your RPC node is running correctly by executing a simple ",(0,a.kt)("inlineCode",{parentName:"p"},"curl")," command. A functioning RPC node will return data, while a non-functioning one will return an error."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl -H "Content-Type: application/json" -d \'{"id":1, "jsonrpc":"2.0", "method": "rpc_methods"}\' http://127.0.0.1:9933/\n')))}u.isMDXComponent=!0}}]);