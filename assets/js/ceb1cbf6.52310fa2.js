"use strict";(self.webpackChunkavail_docs_wiki=self.webpackChunkavail_docs_wiki||[]).push([[225],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),d=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=d(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(n),u=a,f=p["".concat(l,".").concat(u)]||p[u]||h[u]||i;return n?o.createElement(f,r(r({ref:t},c),{},{components:n})):o.createElement(f,r({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,r[1]=s;for(var d=2;d<i;d++)r[d]=n[d];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},671:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var o=n(7462),a=(n(7294),n(3905));n(4996);const i={id:"node-types",title:"Types of Nodes",sidebar_label:"Types of Nodes",sidebar_position:1,description:"Learn about the type of nodes in avail project",keywords:["docs","avail","node","data availability","da"],image:"https://availproject.github.io/img/avail/AvailDocs.png",slug:"node-types"},r=void 0,s={unversionedId:"node/node-types",id:"node/node-types",title:"Types of Nodes",description:"Learn about the type of nodes in avail project",source:"@site/docs/node/node-types.md",sourceDirName:"node",slug:"/node/node-types",permalink:"/node/node-types",draft:!1,editUrl:"https://github.com/availproject/availproject.github.io/tree/main/docs/node/node-types.md",tags:[],version:"current",lastUpdatedBy:"DSalman03",lastUpdatedAt:1693542673,formattedLastUpdatedAt:"Sep 1, 2023",sidebarPosition:1,frontMatter:{id:"node-types",title:"Types of Nodes",sidebar_label:"Types of Nodes",sidebar_position:1,description:"Learn about the type of nodes in avail project",keywords:["docs","avail","node","data availability","da"],image:"https://availproject.github.io/img/avail/AvailDocs.png",slug:"node-types"},sidebar:"nodeSidebar",next:{title:"Run a Full Node",permalink:"/node/full-node-setup"}},l={},d=[{value:"Overview",id:"overview",level:2},{value:"Light Clients",id:"light-clients",level:3},{value:"Full Nodes",id:"full-nodes",level:3},{value:"Validator Nodes",id:"validator-nodes",level:3},{value:"Notable Node Variants",id:"notable-node-variants",level:2},{value:"Archive Nodes",id:"archive-nodes",level:3},{value:"Pruned Nodes",id:"pruned-nodes",level:3},{value:"RPC Nodes",id:"rpc-nodes",level:3},{value:"Bootstrap Nodes",id:"bootstrap-nodes",level:3},{value:"Relay Nodes",id:"relay-nodes",level:3}],c={toc:d},p="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"Blockchains are distributed ledgers that store transactional data\nacross a network of nodes. Although Avail is not the traditional\nmonolithic blockchains and is a modular blockchain solution optimized\nfor data availability, it still has different types of nodes. Each\nnode type has a different level of participation in the avail network,\nand different requirements in terms of storage and bandwidth."),(0,a.kt)("p",null,"The most important kinds of nodes you will likely set up are:"),(0,a.kt)("h3",{id:"light-clients"},"Light Clients"),(0,a.kt)("p",null,"Light nodes are a type of nodes that allows users to interact with the\nblockchain network without having to download and store the entire\nblockchain history. Instead, light nodes rely on a set of trusted\nnodes, called a light client infrastructure, to provide them with the\nnecessary data to interact with the network."),(0,a.kt)("h3",{id:"full-nodes"},"Full Nodes"),(0,a.kt)("p",null,"Full nodes store the current state of the blockchain, including the\ncurrent block and transaction data. This node type is designed to\nquickly and efficiently access the current state of the blockchain,\nbut they do not store the entire transaction history. Full nodes are\noptimized for fast, efficient access to current blockchain data. They\nare designed to be lightweight and responsive, making them well-suited\nfor tasks like verifying transactions and broadcasting new blocks."),(0,a.kt)("h3",{id:"validator-nodes"},"Validator Nodes"),(0,a.kt)("p",null,"Validators are full nodes that also have a staked amount on the chain,\nand are responsible for producing blocks and validating that the chain\nis functioning correctly."),(0,a.kt)("h2",{id:"notable-node-variants"},"Notable Node Variants"),(0,a.kt)("h3",{id:"archive-nodes"},"Archive Nodes"),(0,a.kt)("p",null,"Archive nodes store the entire transaction history of the blockchain,\nincluding all previous blocks and transactions. This makes archive\nnodes much larger in terms of storage requirements. Can provide access\nto historical data, including previous versions of the blockchain\nstate. This makes this type of node useful for auditing and compliance\npurposes, as well as for analyzing blockchain activity over\ntime.Archive nodes, on the other hand, are more resource-intensive and\nrequire more powerful hardware to operate efficiently. They may be\nslower and less responsive than full nodes, especially when accessing\nhistorical data. Their primary focus is on data storage and historical\ndata access."),(0,a.kt)("h3",{id:"pruned-nodes"},"Pruned Nodes"),(0,a.kt)("p",null,"A pruned node refers to a type of node configuration where certain\nhistorical data is removed or pruned from Avails storage, reducing the\ndisk space requirements while maintaining the ability to participate\nin the network.  When a Avail node operates as a pruned node, it\nretains only the most recent state of Avail network and discards or\nremoves older historical data, such as past blocks and\ntransactions. The pruning process allows the node to save disk space\nby selectively discarding data that is no longer needed for the\ncurrent state verification or network consensus."),(0,a.kt)("h3",{id:"rpc-nodes"},"RPC Nodes"),(0,a.kt)("p",null,"An RPC (Remote Procedure Call) node refers to a node that exposes an\nAPI (Application Programming Interface) for remote interaction with\nthe Avail network. It allows external clients, such as applications or\nother nodes, to send requests and receive responses from the Avail\nnetwork."),(0,a.kt)("p",null,"The RPC node serves as a gateway for developers and users to interact\nwith the Avail network without the need to run a full node locally."),(0,a.kt)("h3",{id:"bootstrap-nodes"},"Bootstrap Nodes"),(0,a.kt)("p",null,"This type of node, a bootstrapping node, is also known as a rendezvous\nhost. Widely known as a Boot Node, or a Bootstrap Node. New nodes in a\np2p network often make their initial connection to these sets of nodes. "),(0,a.kt)("p",null,"Bootstrap node in an overlay network then provides initial configuration\ninformation to newly joining nodes so that they may successfully join the\np2p network. Bootstrapping exist in overlay networks ","[peer-to-peer (P2P)]","\nbecause of the dynamically changing identities and configurations of member\nnodes in  these networks."),(0,a.kt)("p",null,"After a Boot node had served it purpose as an entry point to the network,\nand had provided a list of other nodes in the network to the newcomers,\nnew nodes will no longer rely on them."),(0,a.kt)("h3",{id:"relay-nodes"},"Relay Nodes"),(0,a.kt)("p",null,"There will certainly be situations where means of establishing a direct\ncommunication between peers is unfeasible. These situations require the\nassistance of a third peer willing and able to act as an intermediary."),(0,a.kt)("p",null,"In real-world peer-to-peer networks, direct communication between all its\npeers may practically be impossible, and suffers from variety of reasons.\nEven if assume that everyone on the network has the same common transport\nmechanism, one or more peers may be behind a firewall, or some has NAT\ntraversal issues."),(0,a.kt)("p",null,"This gaping communication chasm is possible to bridge, so long as each\nof peers is capable of establishing a connection to a willing Relay peer.\nAnd our pal, the Relay peer, will try to directly connect our problematic\npeers, or still provide a circuit relayed connection in cases of pesky\nSymmetric NAT cases. Either way, the Relay node is a great ally in trying\nto minimize snags in p2p network connectivity."))}h.isMDXComponent=!0}}]);