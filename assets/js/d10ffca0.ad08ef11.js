"use strict";(self.webpackChunkavail_docs_wiki=self.webpackChunkavail_docs_wiki||[]).push([[972],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(a),m=i,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return a?n.createElement(h,o(o({ref:t},c),{},{components:a})):n.createElement(h,o({ref:t},c))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},3650:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var n=a(7462),i=(a(7294),a(3905));const r={id:"app-ids",title:"Application IDs",sidebar_label:"Application IDs",sidebar_position:2,description:"Learn about how multiple chains can use Avail at the same time",keywords:["docs","avail","node","data availability","da","appid","application IDs","applications","modular chains"],image:"https://availproject.github.io/img/avail/AvailDocs.png",slug:"app-ids"},o=void 0,l={unversionedId:"concepts/app-ids",id:"concepts/app-ids",title:"Application IDs",description:"Learn about how multiple chains can use Avail at the same time",source:"@site/docs/concepts/002-appids.md",sourceDirName:"concepts",slug:"/concepts/app-ids",permalink:"/concepts/app-ids",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"app-ids",title:"Application IDs",sidebar_label:"Application IDs",sidebar_position:2,description:"Learn about how multiple chains can use Avail at the same time",keywords:["docs","avail","node","data availability","da","appid","application IDs","applications","modular chains"],image:"https://availproject.github.io/img/avail/AvailDocs.png",slug:"app-ids"},sidebar:"defaultSidebar",previous:{title:"Embedding the Light Client",permalink:"/using-avail/core-sdks-and-apis/embedding-the-light-client"},next:{title:"Chill & Slashing",permalink:"/concepts/avail-chill-slashing-node"}},s={},p=[],c={toc:p},u="wrapper";function d(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"As a general purpose base layer, Avail is designed to support many\nmodular chains at the same time, providing consensus and data\navailability to all of them simultaneously."),(0,i.kt)("p",null,'How does this work? Avail headers contain an index that allows a given\nmodular chain (or "application" in Avail terminology) to determine and\ndownload ',(0,i.kt)("em",{parentName:"p"},"only")," the sections of a block that have data for that\nparticular application."),(0,i.kt)("p",null,"This has very important benefits, including:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Modular applications are largely unaffected by other uses of the\nbase layer at the same time."),(0,i.kt)("li",{parentName:"ul"},"Block sizes can increase without requiring applications to fetch\nmore data, because they don't fetch the whole block, only what's\nrelevant to them.")),(0,i.kt)("p",null,"Data availability sampling is still done on the entire block,\nhowever--this is the process where clients sample very small parts of\nthe block at random to verify availability. Learn more about DAS on\nour ",(0,i.kt)("a",{parentName:"p",href:"/faq"},"FAQ"),"."))}d.isMDXComponent=!0}}]);