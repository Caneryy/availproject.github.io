"use strict";(self.webpackChunkavail_docs_wiki=self.webpackChunkavail_docs_wiki||[]).push([[557],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=p(a),y=o,h=u["".concat(s,".").concat(y)]||u[y]||c[y]||l;return a?n.createElement(h,r(r({ref:t},d),{},{components:a})):n.createElement(h,r({ref:t},d))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=a.length,r=new Array(l);r[0]=y;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:o,r[1]=i;for(var p=2;p<l;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}y.displayName="MDXCreateElement"},5352:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var n=a(7462),o=(a(7294),a(3905));a(4996);const l={id:"avail-relay-node",title:"How to Run a Relay Node",sidebar_label:"Run a Relay Node",sidebar_position:6,description:"Learn how to run an Avail relay node.",keywords:["docs","avail","node","data availability","da"],image:"https://availproject.github.io/img/avail/AvailDocs.png"},r=void 0,i={unversionedId:"node/avail-relay-node",id:"node/avail-relay-node",title:"How to Run a Relay Node",description:"Learn how to run an Avail relay node.",source:"@site/docs/node/0060-avail-relay-node.md",sourceDirName:"node",slug:"/node/avail-relay-node",permalink:"/node/avail-relay-node",draft:!1,editUrl:"https://github.com/availproject/availproject.github.io/tree/main/docs/node/0060-avail-relay-node.md",tags:[],version:"current",lastUpdatedBy:"DSalman03",lastUpdatedAt:1693543862,formattedLastUpdatedAt:"Sep 1, 2023",sidebarPosition:6,frontMatter:{id:"avail-relay-node",title:"How to Run a Relay Node",sidebar_label:"Run a Relay Node",sidebar_position:6,description:"Learn how to run an Avail relay node.",keywords:["docs","avail","node","data availability","da"],image:"https://availproject.github.io/img/avail/AvailDocs.png"},sidebar:"nodeSidebar",previous:{title:"Run a Bootstrap Node",permalink:"/node/avail-bootstrap-node"}},s={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation Steps",id:"installation-steps",level:2},{value:"1. Install Rust and Dependencies",id:"1-install-rust-and-dependencies",level:3},{value:"2. Clone the Relay Node Repository",id:"2-clone-the-relay-node-repository",level:3},{value:"3. Compile the Binary",id:"3-compile-the-binary",level:3},{value:"4. Deploy the Binary",id:"4-deploy-the-binary",level:3},{value:"5. Create and Edit the Configuration File",id:"5-create-and-edit-the-configuration-file",level:3}],d={toc:p},u="wrapper";function c(e){let{components:t,...a}=e;return(0,o.kt)(u,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This guide provides a step-by-step walkthrough for setting up a relay node, which can help resolve connectivity issues between network peers. Follow the installation and configuration steps below to get your relay node up and running."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A local machine or a cloud-based Virtual Machine (VM)"),(0,o.kt)("li",{parentName:"ul"},"Basic understanding of command-line operations"),(0,o.kt)("li",{parentName:"ul"},"Rust programming language installed")),(0,o.kt)("h2",{id:"installation-steps"},"Installation Steps"),(0,o.kt)("h3",{id:"1-install-rust-and-dependencies"},"1. Install Rust and Dependencies"),(0,o.kt)("p",null,"First, you'll need to install Rust and its toolchain. Open your terminal and run the following commands:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"If you're using a new machine (i.e. Ubuntu), you may need to install essential build tools:")),(0,o.kt)("blockquote",null,(0,o.kt)("pre",{parentName:"blockquote"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt update\nsudo apt install build-essential\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl https://sh.rustup.rs -sSf | sh  # Download and install Rust\nsource $HOME/.cargo/env              # Add Rust to your PATH\nrustup update nightly                # Update to the nightly version\nrustup target add wasm32-unknown-unknown --toolchain nightly  # Add WebAssembly target\nrustc --version                      # Verify Rust installation by displaying the version\n")),(0,o.kt)("h3",{id:"2-clone-the-relay-node-repository"},"2. Clone the Relay Node Repository"),(0,o.kt)("p",null,"Clone the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/availproject/avail-light-relay"},"Relay Node project repository")," from GitHub:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/availproject/avail-light-relay.git\n")),(0,o.kt)("h3",{id:"3-compile-the-binary"},"3. Compile the Binary"),(0,o.kt)("p",null,"Navigate to the project directory and compile the source code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd avail-light-relay                 \ncargo build --release                # Compile the project in release mode\n")),(0,o.kt)("p",null,"Upon successful compilation, the binary will be located at ",(0,o.kt)("inlineCode",{parentName:"p"},"target/release/avail-light-relay"),"."),(0,o.kt)("h3",{id:"4-deploy-the-binary"},"4. Deploy the Binary"),(0,o.kt)("p",null,"If you've compiled the binary locally, transfer it to your server using ",(0,o.kt)("inlineCode",{parentName:"p"},"scp")," or another secure method."),(0,o.kt)("h3",{id:"5-create-and-edit-the-configuration-file"},"5. Create and Edit the Configuration File"),(0,o.kt)("p",null,"On your server, navigate to the directory where you've placed the binary. Create and edit a ",(0,o.kt)("inlineCode",{parentName:"p"},"config.yaml")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"touch config.yaml                    # Create a new config.yaml file\nnano config.yaml                     # Open the file in a text editor\n")),(0,o.kt)("p",null,"To avoid conflicts between nodes, especially if they are running on the same machine or network, consider the following:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"libp2p_port"),": This could potentially cause a conflict if multiple nodes are running on the same machine and trying to bind to the same port. Each node on the same machine should have a unique port.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"secret_key"),": If this is used for cryptographic operations like signing messages, then using the same key across different nodes could be a security risk and could also lead to logical errors in the network operation."))),(0,o.kt)("p",null,"Use the following example configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"log_level: 'INFO'                    # Logging level\nlog_format_json: false               # Log format\nsecret_key: { seed: \"unique_seed\" }  # Secret key setting\nlibp2p_port: 39000                   # libp2p port\nlibp2p_identify_protocol: '/avail_kad/id/1.0.0'  # libp2p protocol\n")),(0,o.kt)("p",null,"For more advanced configurations, consult the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/availproject/avail-light-relay#config-reference"},"Configuration Reference"),"."),(0,o.kt)("p",null,"Congratulations! You've successfully set up a relay Node. Your node is now ready to assist with connectivity issues between light clients in your network. Happy relaying! \ud83d\ude80"))}c.isMDXComponent=!0}}]);