"use strict";(self.webpackChunkavail_docs_wiki=self.webpackChunkavail_docs_wiki||[]).push([[558],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(a),h=r,k=u["".concat(s,".").concat(h)]||u[h]||c[h]||o;return a?n.createElement(k,i(i({ref:t},p),{},{components:a})):n.createElement(k,i({ref:t},p))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},3548:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));a(4996);const o={id:"avail-backup-node",title:"Backup Validator",sidebar_label:"Backup Validator",description:"Learn about backup tasks for Avail validator.",keywords:["docs","avail","node","validator"],image:"https://availproject.github.io/img/avail/AvailDocs.png",slug:"avail-backup-node"},i=void 0,l={unversionedId:"join-the-network/run-avail/validator-ops/avail-backup-node",id:"join-the-network/run-avail/validator-ops/avail-backup-node",title:"Backup Validator",description:"Learn about backup tasks for Avail validator.",source:"@site/docs/join-the-network/run-avail/validator-ops/0020-avail-backup-node.md",sourceDirName:"join-the-network/run-avail/validator-ops",slug:"/join-the-network/run-avail/validator-ops/avail-backup-node",permalink:"/join-the-network/run-avail/validator-ops/avail-backup-node",draft:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{id:"avail-backup-node",title:"Backup Validator",sidebar_label:"Backup Validator",description:"Learn about backup tasks for Avail validator.",keywords:["docs","avail","node","validator"],image:"https://availproject.github.io/img/avail/AvailDocs.png",slug:"avail-backup-node"},sidebar:"defaultSidebar",previous:{title:"Run a RPC Node",permalink:"/join-the-network/run-avail/other-nodes/avail-rpc-node"},next:{title:"Upgrading Validators",permalink:"/join-the-network/run-avail/validator-ops/avail-upgrade-validator-node"}},s={},d=[{value:"Validator Directories",id:"validator-directories",level:2},{value:"Re-Sync or Restore Snapshot",id:"re-sync-or-restore-snapshot",level:2},{value:"Backup Keystore",id:"backup-keystore",level:2}],p={toc:d},u="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"validator-directories"},"Validator Directories"),(0,r.kt)("p",null,"It is important to understand the folder structure of the Avail node. Knowing where the database and keys are stored can help manage your node more affectively."),(0,r.kt)("p",null,"The folder structure for Avail node:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u2514\u2500\u2500 chains\n    \u2514\u2500\u2500 da_testnet\n        \u2514\u2500\u2500 db\n            \u2514\u2500\u2500 full\n        \u2514\u2500\u2500 keystore\n        \u2514\u2500\u2500 network\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"--base-path")," parameter allows you to specify a custom base directory for storing Avail's data and configuration files. When you specify a directory using ",(0,r.kt)("inlineCode",{parentName:"p"},"--base-path"),",\nAvail will create the necessary folders (db, keystore, network) within that custom location. "),(0,r.kt)("p",null,"Details of the folder content:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"db: This folder contains the database files used by Avail to store blockchain state, block data, transaction history, and other related data. The database files are typically\nstored in a format optimized for efficient data retrieval and storage. The default database is RocksDB.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"keystore: The keystore folder is where the encrypted key files of the Validator are stored. When you execute ",(0,r.kt)("inlineCode",{parentName:"p"},"author_rotateKeys")," several key files are created. The output from\n",(0,r.kt)("inlineCode",{parentName:"p"},"author_rotateKeys")," provides a hex-encoded value, this value is a concatanation of the file names in the keystore folder.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"network: The network folder holds configuration files related to network connectivity and peer management. It includes information about known nodes, peer addresses, and other network-related settings. "))),(0,r.kt)("h2",{id:"re-sync-or-restore-snapshot"},"Re-Sync or Restore Snapshot"),(0,r.kt)("p",null,"To delete your DB and re-sync from genesis:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"avail purge-chain\n")),(0,r.kt)("p",null,"Should we wish to restore a DB you will need to"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Stop your node"),(0,r.kt)("li",{parentName:"ul"},"Delete the chain data"),(0,r.kt)("li",{parentName:"ul"},"Download a snapshot from another node "),(0,r.kt)("li",{parentName:"ul"},"Restore the snapshot on the DB folder")),(0,r.kt)("admonition",{title:"warp sync",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Note that the dependancy on snapshots will be less in the future as warp sync will allow a node to be up and running in a few minutes. Current Avail Testnet does not support\nwarp sync yet. Will be made available in future release.")),(0,r.kt)("h2",{id:"backup-keystore"},"Backup Keystore"),(0,r.kt)("p",null,"If the contents of the keystore from a primary node is moved to backup node that is in sync, will allow the node to carry on particpating in the concensus. However the primary node\nshould not be running anymore."),(0,r.kt)("admonition",{title:"Never run two nodes with the same keys",type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Never run two nodes with the same keys. The node will double sign(equivocation) if you have two nodes running at the same time with the same keys.")),(0,r.kt)("p",null,"Moving keystore between servers is not the recommended approach to switch between nodes. This method should only be used in extreme occassions. Review how you can transition between nodes safely in\nthe ",(0,r.kt)("a",{parentName:"p",href:"/join-the-network/run-avail/validator-ops/avail-upgrade-validator-node"},"upgrading section")))}c.isMDXComponent=!0}}]);